<?php

define( 'BUNDLE_INHERIT_KEY', 'inherit bundle');

function bundle_inheritance_entity_info ()
{
    $entities = array();
    $entities[BundleInheritanceRelation::EntityType] = array(
        'label' => t('inheritance relation'),
        'controller class' => 'BundleInheritanceController',
        'entity class' => 'BundleInheritanceRelation',
        'base table' => 'bundle_inheritances',
        'fieldable' => FALSE,
        'entity keys' => array(
            'id' => 'id',
            'label' => 'label',
            'bundle' => 'bundle'
        ),
        'bundle keys' => array(
            'bundle' => 'bundle'
        )
    );
    return $entities;
}

/**
 * 
 * @param unknown $entities
 */
function bundle_inheritance_entity_info_alter (&$entities)
{
    foreach( $entities as $entityName=>$entity)
    {
        if( array_key_exists( 'bundles', $entity) )
        {
            foreach( $entity['bundles'] as $bundleName=>$bundle )
            {
                if( array_key_exists(BUNDLE_INHERIT_KEY, $bundle) )
                {
                    bundle_inheritance_do_inheritance($entityName, $bundle[BUNDLE_INHERIT_KEY], $bundleName );
                }
            }
        }
    }
}

/**
 * makes inheritance
 *
 * @param string $entity_type
 * @param string $parent
 * @param string $child
 */
function bundle_inheritance_do_inheritance ($entity_type, $parent, $child)
{
    watchdog('debug', 'bundle_inheritance_do_inheritance between '.$parent.' and '.$child );
    $relation = new BundleInheritanceRelation();
    // store inheritance relation in a table
    $relation->parent = $parent;
    $relation->child = $child;
    $relation->entity_type = $entity_type;
    if ($relation->save()) {
        foreach (bundle_inheritance_copy_field_instances($entity_type, $parent, $child) as $instance) {
            if (! field_read_instance($entity_type, $instance['field_name'], $child)) {
                field_create_instance($instance);
            }
        }
    }
}


function bundle_inheritance_break_inheritance($entity_type, $parent, $child)
{
    $ctrl = new BundleInheritanceController();
    $relations = $ctrl->load( FALSE, array( 'parent' => $parent, 'child' => $child) );
    $parentInstances = field_info_instances($entity_type, $parentBundle);
    foreach( $relations as $relation )
    {
        $childInstances = field_info_instances( $entity_type, $relation->child);
        foreach( $parentInstances as $key=>$instance )
        {
            if( array_key_exists( $key, $childInstances) && !$childInstances[$key]['settings']['bundle_inheritance']['modified'] )
            {
                field_delete_instance( $childInstances[$key] );
            }
        }
        $relation->delete();
    }
}

function bundle_inheritance_copy_field_instances ($entity_type, $parentBundle, $newBundle)
{
    try {
        // liste des instances à récupérer
        $parentInstances = field_info_instances($entity_type, $parentBundle);
        if ($parentInstances) {
            foreach ($parentInstances as $key => $instance) {
                $parentInstances[$key] = bundle_inheritance_prepare_instance($parentInstances[$key], $newBundle);
            }
        }
    } catch (Exception $e) {
        $parentInstances = array();
    }
    
    return $parentInstances;
}

/**
 *
 * @param array $instance
 * @param string $newBundle
 */
function bundle_inheritance_prepare_instance ($instance, $newBundle)
{
    unset($instance['id']);
    $instance['bundle'] = $newBundle;
    $instance['label'] .= " [Inherited]";
    $instance['settings']['bundle_inheritance']['inherited'] = true;
    $instance['settings']['bundle_inheritance']['modified'] = FALSE;
    return $instance;
}

/**
 * implementation of hook_field_create_instance
 *
 * when an instance is created on an identified superclass
 * the instance have to be copied
 *
 * @param unknown $instance
 */
function bundle_inheritance_field_create_instance ($instance)
{
    $ctrl = new BundleInheritanceController(BundleInheritanceRelation::EntityType);
    // retrieving all childs from
    $chain = $ctrl->getChilds($instance['bundle']);
    
    if (! empty($chain)) {
        foreach ($chain as $bundle) {
            $newInstance = bundle_inheritance_prepare_instance($instance, $bundle);
            dsm($newInstance);
            field_create_instance($newInstance);
        }
    }
}

/**
 * implementation of hook_field_update_instance
 *
 * when an instance is updated on an identified superclass
 * (only if the child hasn't been modified)
 * the instance have to be copied
 *
 * @param unknown $instance
 *
 */
function bundle_inheritance_field_update_instance ($instance, $prior_instance)
{
    $ctrl = new BundleInheritanceController(BundleInheritanceRelation::EntityType);
    $isOverrided = isset($instance['settings']['bundle_inheritance']) && $instance['settings']['bundle_inheritance']['modified'];
    
    // lookin' for subclass childs bundle
    $chain = $ctrl->getChilds($instance['bundle']);
    if (! empty($chain)) {
        foreach ($chain as $bundle) {
            $existing = field_read_instance($instance['entity_type'], $instance['field_name'], $bundle);
            if (! $existing['settings']['bundle_inheritance']['modified']) {
                $newInstance = bundle_inheritance_prepare_instance($instance, $bundle);
                field_update_instance($newInstance);
            }
        }
    } else {
        if (! $isOverrided) {
            // case of an inherited which is modified
            // so we flag it to modified
            $instance['settings']['bundle_inheritance']['modified'] = TRUE;
            $instance['label'] = str_replace(" [Inherited]", "", $instance['label'] );
            field_update_instance($instance);
        }
    }
}

/**
 * implementation of hook_field_delete_instance
 *
 * when an instance is deleted on an identified superclass
 * the instance have to be copied
 *
 * @param unknown $instance
 */
function bundle_inheritance_field_delete_instance ($instance)
{
    $ctrl = new BundleInheritanceController(BundleInheritanceRelation::EntityType);
    $chain = $ctrl->getChilds($instance['bundle']);
    if (! empty($chain)) {
        foreach ($chain as $bundle) {
            $existing = field_read_instance($instance['entity_type'], $instance['field_name'], $bundle);
            if (! $existing['settings']['bundle_inheritance']['modified']) {
                $newInstance = bundle_inheritance_prepare_instance($instance, $bundle);
                field_delete_instance($newInstance);
            }
        }
    }
}

/**
 * implementation of hook_module_implements_alter
 * we need to be sure that this module is the last to execute entity_info_alter
 * in order to guarantee that other modules may have filled inheritance metadata
 * from entity_info_alter
 *
 * @param array $implementations
 * @param string $hook
 */
function bundle_inheritance_module_implements_alter (&$implementations, $hook)
{
    if (in_array($hook, array(
        'entity_info_alter'
    ))) {
        // Move our hook implementation to the bottom.
        $group = $implementations['bundle_inheritance'];
        unset($implementations['bundle_inheritance']);
        $implementations['bundle_inheritance'] = $group;
    }
}

?>
